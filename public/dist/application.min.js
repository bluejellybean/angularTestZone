"use strict";var ApplicationConfiguration=function(){var applicationModuleName="alexblog",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("blogs"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("incrementalgame"),ApplicationConfiguration.registerModule("users"),angular.module("blogs").run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(e,to){angular.isObject(to.data)&&!Authentication.user&&(e.preventDefault(),$state.go("signin"))})}]).config(["$stateProvider",function($stateProvider){$stateProvider.state("listBlogs",{url:"/blogs",templateUrl:"modules/blogs/views/list-blogs.client.view.html"}).state("createBlog",{url:"/blogs/create",templateUrl:"modules/blogs/views/create-blog.client.view.html",data:{}}).state("viewBlog",{url:"/blogs/:blogId",templateUrl:"modules/blogs/views/view-blog.client.view.html"}).state("editBlog",{url:"/blogs/:blogId/edit",templateUrl:"modules/blogs/views/edit-blog.client.view.html",data:{}})}]),angular.module("blogs").controller("BlogsController",["$scope","$stateParams","$location","Authentication","Blogs",function($scope,$stateParams,$location,Authentication,Blogs){$scope.authentication=Authentication,$scope.create=function(){var blog=new Blogs({name:this.name,content:this.content});blog.$save(function(response){$location.path("blogs/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(blog){if(blog){blog.$remove();for(var i in $scope.blogs)$scope.blogs[i]===blog&&$scope.blogs.splice(i,1)}else $scope.blog.$remove(function(){$location.path("blogs")})},$scope.update=function(){var blog=$scope.blog;blog.$update(function(){$location.path("blogs/"+blog._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.blogs=Blogs.query()},$scope.findOne=function(){$scope.blog=Blogs.get({blogId:$stateParams.blogId})}}]),angular.module("blogs").factory("Blogs",["$resource",function($resource){return $resource("blogs/:blogId",{blogId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",controller:"HomeController as home",templateUrl:"modules/core/views/home.client.view.html"}).state("about",{url:"/about",controller:"HeaderController as hee",templateUrl:"modules/core/views/about.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Menu",function($scope,Authentication,Menu){this.menu=Menu.getMenu("topbar"),this.authentication=Authentication}]),angular.module("core").service("Menu",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").directive("modalDialog",[function(){return{restrict:"E",scope:{show:"="},replace:!0,transclude:!0,link:function(scope,element,attrs){scope.dialogStyle={},attrs.width&&(scope.dialogStyle.width=attrs.width),attrs.height&&(scope.dialogStyle.height=attrs.height),scope.hideModal=function(){scope.show=!1}},template:'<div class="ng-modal" ng-show="show"><div class="ng-modal-overlay" ng-click="hideModal()"></div><div class="ng-modal-dialog" ng-style="dialogStyle"><div class="ng-modal-close" ng-click="hideModal()">X</div><div class="ng-modal-dialog-content" ng-transclude></div></div></div>'}}]),angular.module("incrementalgame").config(["$stateProvider",function($stateProvider){$stateProvider.state("incrementalgame",{url:"/incrementalgame",controller:"IncrementalgameController as click",templateUrl:"modules/incrementalgame/views/incrementalgame.client.view.html"})}]),angular.module("incrementalgame").controller("GameMenuController",["Gamelogic",function(Gamelogic){this.modalShown=!1,this.toggleModal=function(){this.modalShown=!this.modalShown},this.invertedState=Gamelogic.getInvertState(),this.saveGame=function(){Gamelogic.saveUserInformation()},this.loadGame=function(){Gamelogic.loadUserInformation()},this.resetGame=function(){Gamelogic.resetUserInformation()},this.invertColors=function(){this.invertedState="default"===this.invertedState?"inverted":"default",Gamelogic.flipInvertState()}}]),angular.module("incrementalgame").controller("IncrementalgameController",["$scope","$interval","Gamelogic",function($scope,$interval,Gamelogic){this.userInfo=Gamelogic.getUserInformation(),this.totalWorkers=Gamelogic.getTotalWorkers();var Tiers=Gamelogic.getTiers();this.level=Tiers,this.increaseTotalClicks=function(){Gamelogic.increaseTotalClicksByOne()},this.produceWidget=function(){Gamelogic.increaseMoneyBy(1)},this.getWorkerCost=function(tier){return Tiers[tier].worker.price},this.getUpgradeLevel=function(tier){return Gamelogic.getUpgradeLevel(tier)},this.getUpgradeCost=function(tier){var upgradeLevel=Gamelogic.getUpgradeLevel(tier);return 2>upgradeLevel?Tiers[tier].upgrade[upgradeLevel].price:9007199254740992},this.getMoney=function(){return Gamelogic.getCurrentMoney()},this.buyWorker=function(tier){Gamelogic.decreaseMoneyBy(Tiers[tier].worker.price),Gamelogic.increaseWorkerCount(tier)},this.buyUpgrade=function(tier){Gamelogic.decreaseMoneyBy(Tiers[tier].upgrade[0].price),Gamelogic.increaseUpgradeLevel(tier)};var gameTick=$interval(function(){var workers=Gamelogic.getUserInformation();workers=workers.workers;var workerCount="",upgradeLevel="",baseProduction="",increaseValue="";angular.forEach(workers,function(value,key){upgradeLevel=Gamelogic.getUpgradeLevel(key),workerCount=Gamelogic.getWorkerCount(key),baseProduction=Gamelogic.getBaseProduction(key),increaseValue=upgradeLevel>0?baseProduction*workerCount*upgradeLevel*2:baseProduction*workerCount,Gamelogic.increaseMoneyBy(increaseValue)})},1e3);$scope.$on("$destroy",function(){$interval.cancel(gameTick)})}]),angular.module("incrementalgame").factory("Gamelogic",[function(){var clickAPI={},UserInformation={currentMoney:0,workers:[0,0,0,0,0],upgrades:[0,0,0,0,0],totalClicks:0,settings:{color:"default"}},TotalWorkers={count:0};clickAPI.getTotalWorkers=function(){return TotalWorkers},clickAPI.findTotalWorkerCount=function(){var workerCount=0;return angular.forEach(UserInformation.workers,function(value){workerCount=workerCount+=value}),TotalWorkers.count=workerCount,TotalWorkers},clickAPI.increaseTotalClicksByOne=function(){UserInformation.totalClicks=UserInformation.totalClicks+1},clickAPI.saveUserInformation=function(){var UserInformationToSave=JSON.stringify(UserInformation);UserInformationToSave=btoa(UserInformationToSave),localStorage.setItem("userInfoObject",JSON.stringify(UserInformationToSave))},clickAPI.loadUserInformation=function(){var retrievedObject=localStorage.getItem("userInfoObject");if("undefined"!=typeof retrievedObject&&null!==retrievedObject){retrievedObject=JSON.parse(retrievedObject);var loadedUserInformation=atob(retrievedObject);loadedUserInformation=JSON.parse(loadedUserInformation),this.resetUserInformation(),UserInformation.currentMoney=loadedUserInformation.currentMoney,UserInformation.workers=loadedUserInformation.workers,UserInformation.upgrades=loadedUserInformation.upgrades,UserInformation.settings.color=loadedUserInformation.settings.color,this.findTotalWorkerCount()}else console.log("can't load item!")},clickAPI.getInvertState=function(){return UserInformation.settings.color},clickAPI.flipInvertState=function(){UserInformation.settings.color="default"===UserInformation.settings.color?"inverted":"default"},clickAPI.resetUserInformation=function(){UserInformation.currentMoney=0,UserInformation.workers=[0,0,0,0,0],UserInformation.upgrades=[0,0,0,0,0],UserInformation.settings.color="default"},clickAPI.getUserInformation=function(){return UserInformation},clickAPI.getCurrentMoney=function(){return UserInformation.currentMoney},clickAPI.getWorkerCount=function(workerNumber){return UserInformation.workers[workerNumber]},clickAPI.getUpgradeLevel=function(upgradeNumber){return UserInformation.upgrades[upgradeNumber]},clickAPI.getBaseProduction=function(tierNumber){return Tiers[tierNumber].worker.baseProduction},clickAPI.increaseMoneyBy=function(moneyValue){UserInformation.currentMoney+=moneyValue},clickAPI.decreaseMoneyBy=function(moneyValue){UserInformation.currentMoney-=moneyValue},clickAPI.increaseWorkerCount=function(workerNumber){TotalWorkers.count+=1,UserInformation.workers[workerNumber]+=1},clickAPI.increaseUpgradeLevel=function(upgradeNumber){UserInformation.upgrades[upgradeNumber]+=1},clickAPI.getTiers=function(){return Tiers};var Tiers=[{worker:{name:"worker 1",price:1,description:"The 1st worker, gain 1 item per sec",baseProduction:1},upgrade:[{name:"upgradeTier1 #1",price:50,description:"The 1st upgrade, x2 worker 1 production"},{name:"upgradeTier1 #2",price:100,description:"The 2nd upgrade, x4 worker 1 production"}]},{worker:{name:"worker 2",price:50,description:"The first worker, gain 100 item per sec",baseProduction:100},upgrade:[{name:"upgradeTier2 #1",price:500,description:"The 1st upgrade, x2 worker 2 production"},{name:"upgradeTier2 #2",price:1e3,description:"The 2nd upgrade, x4 worker 2 production"}]},{worker:{name:"worker 3",price:2e3,description:"The first worker, gain 2000 item per sec",baseProduction:500},upgrade:[{name:"upgradeTier3 #1",price:5e3,description:"The 1st upgrade, x2 worker 3 production"},{name:"upgradeTier3 #2",price:1e4,description:"The 2nd upgrade, x4 worker 3 production"}]},{worker:{name:"worker 4",price:1e4,description:"The 4th worker, gain 10000 item per sec",baseProduction:1e3},upgrade:[{name:"upgradeTier4 #1",price:2e4,description:"The 1st upgrade, x2 worker 4 production"},{name:"upgradeTier4 #2",price:4e4,description:"The 2nd upgrade, x4 worker 4 production"}]},{worker:{name:"worker 5",price:1e5,description:"The 5th worker, gain 100000 item per sec",baseProduction:2e3},upgrade:[{name:"upgradeTier5 #1",price:2e5,description:"The 1st upgrade, x2 worker 5 production"},{name:"upgradeTier5 #2",price:4e5,description:"The 2nd upgrade, x4 worker 5 production"}]}];return clickAPI}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/signin"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);